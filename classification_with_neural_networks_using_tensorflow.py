# -*- coding: utf-8 -*-
"""Classification_with_Neural_Networks_using_Tensorflow

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1z0ddq6svHLGsHLhRFUcyGndlCCM3ds9A

# Lab Overview
In this lab, you will learn how to apply neural networks for classification tasks using the Iris flower dataset. The Iris dataset contains measurements of four features of different iris flowers: sepal length, sepal width, petal length, and petal width. Our goal is to train a neural network model to classify the iris flowers into three different species: Setosa, Versicolor, and Virginica.

## Step 1: Import Libraries
We'll start by importing the necessary libraries. In this lab, we'll be using TensorFlow, NumPy, and scikit-learn.
"""

import tensorflow as tf
import numpy as np
from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import OneHotEncoder

"""## Step 2: Load and Preprocess the Dataset
Next, we'll load the Iris dataset and preprocess it. We'll split the dataset into training and testing sets and perform one-hot encoding on the target labels.
"""

# Load the Iris dataset
iris = load_iris()

print(iris)

# Split the dataset into features and labels
X = iris.data
y = iris.target.reshape(-1, 1)

print(X)
print(y)

# We can also convert this X and Y array to Pandas DataFrame
import pandas as pd

df = pd.DataFrame(data=X, columns=["Sepal_length", "Sepal_width", "Petal_length", "Petal_width"])
df["Species"] = y
df

df.shape

df.isnull().sum()

# Perform one-hot encoding on the target labels
encoder = OneHotEncoder(categories="auto")
y = encoder.fit_transform(y).toarray()
y

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

"""## Step 3: Build the Neural Network Model
Now, we'll define and build our neural network model using TensorFlow. We'll use a simple architecture with two hidden layers.
"""

# Define the model architecture
import tensorflow as tf
model = tf.keras.models.Sequential([
    tf.keras.layers.Dense(10, input_shape=(4,), activation='relu'),
    tf.keras.layers.Dense(10, activation='relu'),
    tf.keras.layers.Dense(3, activation='softmax')
])

model.summary()

"""## Step 4: Compile and Train the Model
Next, we'll compile the model by specifying the loss function, optimizer, and evaluation metric. Then, we'll train the model on the training data.
"""

# Compile the model
model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])

# Train the model
history = model.fit(X_train, y_train, epochs=50, batch_size=8, verbose=1)

import matplotlib.pyplot as plt

# Extract loss and accuracy values from the training history
loss = history.history['loss']
accuracy = history.history['accuracy']

# Plot the loss
plt.figure(figsize=(10, 5))
plt.plot(range(1, len(loss) + 1), loss, color='blue')
plt.xlabel('Epochs')
plt.ylabel('Loss')
plt.title('Training Loss')
plt.grid(True)
plt.show()

# Plot the accuracy
plt.figure(figsize=(10, 5))
plt.plot(range(1, len(accuracy) + 1), accuracy, color='red')
plt.xlabel('Epochs')
plt.ylabel('Accuracy')
plt.title('Training Accuracy')
plt.grid(True)
plt.show()

"""## Step 5: Evaluate the Model
After training, we'll evaluate the model's performance on the testing data and calculate the accuracy.
"""

# Evaluate the model
loss, accuracy = model.evaluate(X_test, y_test, verbose=0)
print("Test Loss:", loss)
print("Test Accuracy:", accuracy)

"""## Step 6: Make Predictions
Finally, we can use the trained model to make predictions on new data.
"""

# Make predictions
predictions = model.predict(X_test)
print(predictions)

predicted_labels = np.argmax(predictions, axis=1)
print(predicted_labels)

from sklearn.metrics import confusion_matrix
import seaborn as sns

# Compute the confusion matrix
cm = confusion_matrix(np.argmax(y_test, axis=1), predicted_labels)

# Plot the confusion matrix using a heatmap
plt.figure(figsize=(8, 6))
sns.heatmap(cm, annot=True, cmap='Blues', fmt='d', xticklabels=iris.target_names, yticklabels=iris.target_names)
plt.xlabel('Predicted Labels')
plt.ylabel('True Labels')
plt.title('Confusion Matrix')
plt.show()

